package com.paypal.mpi;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Reducer.Context;
import org.apache.hadoop.mapreduce.lib.output.MultipleOutputs;
import org.apache.hadoop.io.*;

public class CopyOfCampaignMetricReducer  extends Reducer<CampaignKey,CampaignEvent,CampaignKey,CampaignMetric>
//public class CopyOfCampaignMetricReducer  extends Reducer<CampaignKey,CampaignEvent,CampaignKey,CampaignEvent>
{
	private String campaign_id="";
	private String offer_id="";
	private String offer_vid="";
	private String timestamp="";
	@SuppressWarnings("rawtypes")
	private MultipleOutputs multiple;
	private Map<String,Integer> map = new  HashMap<String,Integer>();
	private String browser;
	private String device;
	private String OS;
	private String location;
	 
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public void setup(Context context)throws java.io.IOException ,
	InterruptedException
	{
		 String period = context.getConfiguration().get("period");
		 String[] periods =  period.split("/");
		 String time = periods[0]+"-"+periods[1]+"-"+periods[2]+" "+periods[3]+":00:00";
		 
		 
		 SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		 Date date;
		 multiple = new  MultipleOutputs(context);
		try {
			date = formatter.parse(time);
			timestamp = formatter.format(date);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
		 
	}
	public void reduce(CampaignKey key,  Iterable<CampaignEvent>  events, Context context)
	throws java.io.IOException,InterruptedException	
	{
		
		
		campaign_id =  key.getCampaignID();
		
		offer_id  =  key.getOfferID();
		
		offer_vid =  key.getOfferVID();
		
		CampaignMetric cMetric = new CampaignMetric();
		cMetric.clear();
		cMetric.campaign_id = campaign_id;
		cMetric.offer_id =  offer_id;
		cMetric.offer_vid  = offer_vid; 
		cMetric.timestamp  = timestamp;
		
		for(CampaignEvent event : events)
		{
			browser= event.browser;
			if(browser==null|| browser.length()==0)
				browser = "UNKNOWN";
			
			device = event.device;
			if(device==null||device.length()==0)
				device = "UNKNOWN";
			
			OS = event.os;
			if (OS == null||OS.length()==0)
				OS = "UNKNOWN";
			
			location = event.geoState;
			if(location ==null||location.length()==0)
				location = "UNKNOWN";
			
			StringBuilder build = new StringBuilder();
			List<String> list = new LinkedList<String>();
			list.add(browser);build.append(browser);
			list.add(device);build.append("-"+device);
			list.add(OS);build.append("-"+OS);
			list.add(location);build.append("-"+location);
			System.out.println(build.toString());
			if( map.containsKey(build.toString() ))
			{
				System.out.println(list);
				int count=map.get(build.toString());
				count++;
				map.put(build.toString(),count);
			}
			else
				map.put(build.toString(),1);
			
			/*if( cMetric.browser_count.containsKey(  event.browser))
			{
				 int value = cMetric.browser_count.get(event.browser);
				 value++;
				 cMetric.browser_count.put(event.browser, value);
			}
			else
			{
				cMetric.browser_count.put(event.browser, 1);
			}
			
			if( cMetric.os_count.containsKey(  event.os))
			{
				 int value = cMetric.os_count.get(event.os);
				 value++;
				 cMetric.os_count.put(event.os, value);
			}
			else
			{
				cMetric.os_count.put(event.os, 1);
			}
			
			if( cMetric.geo_state_count.containsKey(  event.geoState))
			{
				 int value = cMetric.geo_state_count.get(event.geoState);
				 value++;
				 cMetric.geo_state_count.put(event.geoState, value);
			}
			else
			{
				cMetric.geo_state_count.put(event.geoState, 1);
			}
			
			if( cMetric.device_count.containsKey(  event.device))
			{
				 int value = cMetric.device_count.get(event.device);
				 value++;
				 cMetric.device_count.put(event.device, value);
			}
			else
			{
				cMetric.device_count.put(event.device, 1);
			}
			
			if(event.event.equals("im"))
			{
				cMetric.im_count++;
			}
			else if(event.event.equals("cl"))
			{
				cMetric.cl_count++;
			}
			else if(event.event.equals("cv"))
			{
				cMetric.cv_count++;
			}
			//multiple.write("completed",key ,event);
		*/}
		
		for(Map.Entry<String,Integer > entry: map.entrySet())
		{
			
			//context.getCounter(entry.getKey().toString(), entry.getValue().toString()).increment(1);
			CampaignMetricGenericCountDBWritable obj = DBObject(key,entry);
			if(obj!=null)
			try
			{
			multiple.write("DBOutput",obj, NullWritable.get());
			}
			catch(Exception e)
			{
				//log
			}
			
			
		}
		//multiple.write ("completedstage2",key, cMetric);
		//multiple.write("DBOutput",cMetricToCampaignEventCountDBWritable(cMetric) ,NullWritable.get());
		
		
		
	}
	 
	
	
	
	private CampaignMetricGenericCountDBWritable DBObject(CampaignKey key, Entry<String,Integer>  entry)
	{
		String[] list = entry.getKey().split("-");
		System.out.println(entry.getKey());
		String  browser=list[0];
		if(browser.length()>10)
			browser= browser.substring(0, 10);
		String  device=list[1];
		if(device.length()>10)
			device = device.substring(0, 10);
		String  OS=list[2];
		if(OS.length()>6)
			OS=OS.substring(0,10);
		String  location=list[3];
		if(location.length()>10)
			location=location.substring(0,10);
			
		
		int value =  entry.getValue();
		
		CampaignMetricGenericCountDBWritable CMGCDBW = new CampaignMetricGenericCountDBWritable(key.getCampaignID(),key.getOfferID(),key.getOfferVID(),timestamp,browser,device,OS,location,value );
		return CMGCDBW;
	}
	
	protected void cleanup(Context context) throws IOException, InterruptedException {
        multiple.close();
   }

	private CampaignEventCountDBWritable cMetricToCampaignEventCountDBWritable(CampaignMetric cM)
	{
		CampaignEventCountDBWritable CEVDBW = new CampaignEventCountDBWritable(cM.campaign_id,cM.offer_id, cM.offer_vid, cM.timestamp, cM.im_count, cM.cl_count, cM.cv_count);
		return CEVDBW;
	}
}
