package com.paypal.mpi;

import java.io.IOException;

import org.apache.avro.mapred.AvroKey;
import org.apache.avro.mapred.AvroValue;
import org.apache.avro.mapreduce.AvroKeyValueOutputFormat;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionBuilder;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.commons.cli.PosixParser;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.lib.db.DBConfiguration;
import org.apache.hadoop.mapreduce.lib.db.DBOutputFormat;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.LazyOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.MultipleOutputs;
import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

import com.paypal.ci.common.CISuperSessionConstants;
import com.paypal.fpti.sessionization.model.Event;
import com.paypal.fpti.sessionization.model.VisitContainer;
import com.paypal.fpti.sessionization.model.VisitKey;
import com.paypal.fpti.sessionization.model.VisitKey.VisitKeyPartitioner;

public class CampaignMetricStage2Driver implements Tool {
  private static final String JOB_PERIOD = "JOB_PERIOD";

  @SuppressWarnings("static-access")
  protected static final Option OPTION_INPUT_PATHS = OptionBuilder
      .withArgName("path").hasArg().isRequired(true)
      .withDescription("Input paths (comma-separated)").create("input");
  @SuppressWarnings("static-access")
  protected static final Option OPTION_OUTPUT_PATH = OptionBuilder
      .withArgName("path").hasArg().isRequired(true)
      .withDescription("Output path").create("outputBasePath");
  @SuppressWarnings("static-access")
  protected static final Option OPTION_PERIOD = OptionBuilder
      .withArgName("yyyy/mm/dd/hh24").hasArg().isRequired(true)
      .withDescription("Period for which this job is run in yyyy/mm/dd/hh24")
      .create("period");
  
  private Configuration conf;

  @Override
  public Configuration getConf() {
    return conf;
  }

  @Override
  public void setConf(Configuration conf) {
    this.conf = conf;
  }

  private CommandLine parseCommandLine(String[] args) throws ParseException {
    Options options = new Options();

    options.addOption(OPTION_INPUT_PATHS);
    options.addOption(OPTION_OUTPUT_PATH);
    options.addOption(OPTION_PERIOD);
    
    CommandLineParser parser = new PosixParser();
    CommandLine cmdLine = null;
    HelpFormatter help = new HelpFormatter();

    try {
      cmdLine = parser.parse(options, args);
    } catch (ParseException e) {
      help.printHelp(this.getClass().getSimpleName(), options);
      System.exit(-1);
    }
    return cmdLine;
  }

 @Override
  public int run(String[] args) throws IOException,InterruptedException, ClassNotFoundException {
	 CommandLine cmdLine = parseCommandLine(args);
		Configuration conf = this.getConf();
		
		conf.set("period",cmdLine.getOptionValue("period"));
		DBConfiguration.configureDB(conf,"com.mysql.jdbc.Driver","jdbc:mysql://10.65.244.48:3306/test", "ciuser", "ci@paypal");
		// Job Details
		@SuppressWarnings( "deprecation" )
		Job job = new Job(conf, "CampaignMetric-Stage2");
		job.setJarByClass(CampaignMetricStage2Driver.class);
		job.setMapperClass(Mapper.class);
		job.setReducerClass(CampaignMetricStage2Reducer.class);
		
		job.setMapOutputKeyClass(CampaignKey.class);
		job.setMapOutputValueClass(CampaignMetric.class);
		//job.setOutputKeyClass(CampaignKey.class);
		//job.setOutputValueClass(CampaignMetric.class);
		/*
		 * DBWrite
		 */
		job.setOutputKeyClass(CampaignEventCountDBWritable.class);
		job.setOutputValueClass(NullWritable.class);
		String inputPath = cmdLine.getOptionValue("outputBasePath") + 
				CampaignMetricConstants.FW_SLASH + cmdLine.getOptionValue("period")+"/"+"completed-r-00000";
		job.setInputFormatClass(SequenceFileInputFormat.class);
		System.out.println("input:"+inputPath);
		
		job.setOutputFormatClass(DBOutputFormat.class);
		FileInputFormat.addInputPaths(job, inputPath);
		DBOutputFormat.setOutput(job,"CampaignMetricGenericCounts", "CampaignID", "OfferID","OfferVID","timestamp","Browser","OS","Device","Location");
		return job.waitForCompletion(true) == true ? 0 : -1;
  }


  public static void main(String[] args) throws Exception {
    ToolRunner.run(new Configuration(), new CampaignMetricStage2Driver(), args);
  }
}
