<script>
					var width = 420,
						barHeight = 20;
					var data2=[10,12,2,6,8,14,15];
					d3.json("event.json",function(data)
					{

						var  im_count = [], cl_count =[], cv_count = [], browserCount=[];	
						for(var i in data)
						{
							im_count.push(data [i].IM_COUNT);
							cl_count.push(data [i].CL_COUNT);
							cv_count.push(data [i].CV_COUNT);	
							//browserCount.push(data[i].br)
						}

    						
    					//barGrapgh(im_count,".event_counts");	
    				
					
					});
					d3.json("browser.json",function(data)

					{
						var new_data=[];
						//alert("data"+data);
						for(var i in data)
						{
							new_data_1= {};
							for(var key in data[i])
							{
								new_data_1["label"]=key;
								new_data_1["value"]=data[i][key];
							}
							//alert(new_data_1);
							new_data.push(new_data_1);

						}
						//pieChart(new_data,".browser");
					}
					);
					d3.json("device.json",function(data)

					{
						var;

					}
					);
					
					
					
					

				</script>
				<script type="text/javascript">
					function barGrapgh(im_count,classes)
					{
						var widthScale = d3.scale.linear()
						.range([0, width]);

					var chart = d3.select(classes)
						
						.append("g")
						.attr("height",barHeight*5)
						.attr("width", width);
						//alert(data);
				  var bar = chart.selectAll("rect")
						.data(im_count)
						.enter();
								//alert("bar"+bar);			

				  var x = bar.append("rect")
					  .attr("width", 0)
					  .attr("height", barHeight - 1)
					  .attr("y",function(d,i){return i*20;});
					//alert(data.id);
					
					x.transition()
					
						.duration(2000)
						.attr("width",function(d) { return d*50; });
				
					

					  bar.append("text")
						  .attr("x", function(d) { return d*50-50 ; })
						  .attr("y",function(d,i){return (barHeight/2)+i*20;})
						  .attr("dy", ".35em")
						  .attr("fill","white")
						  .text(function(d) { return d; });
	
					}

					function pieChart(Count,classes)
					{
						var w = 300,                        //width
					    h = 300,                            //height
					    r = 100,                            //radius
					    color = d3.scale.category20c();     //builtin range of colors

					    data = [{"label":"one", "value":20}, 
					            {"label":"two", "value":50}, 
					            {"label":"three", "value":30}];
					    
					    var vis = d3.select(classes)
					        //.append("svg:svg")              //create the SVG element inside the <body>
					        .data([Count])                   //associate our data with the document
					            .attr("width", w)           //set the width and height of our visualization (these will be attributes of the <svg> tag
					            .attr("height", h)
					        .append("svg:g")                //make a group to hold our pie chart
					            .attr("transform", "translate(" + r*1.5 + "," + r*1.5 + ")")    //move the center of the pie chart from 0, 0 to radius, radius

					    var arc = d3.svg.arc()              //this will create <path> elements for us using arc data
					        .outerRadius(r);
					        //arc.transition()
					        //.duration(2000)
					        //.attr("r",function(d){return d;});

					    var pie = d3.layout.pie()           //this will create arc data for us given a list of values
					        .value(function(d) { return d.value; });    //we must tell it out to access the value of each element in our data array

					    var arcs = vis.selectAll("g.slice")     //this selects all <g> elements with class slice (there aren't any yet)
					        .data(pie)                          //associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties) 
					        .enter()                            //this will create <g> elements for every "extra" data element that should be associated with a selection. The result is creating a <g> for every object in the data array
					            .append("svg:g")                //create a group to hold each slice (we will have a <path> and a <text> element associated with each slice)
					                .attr("class", "slice");    //allow us to style things in the slices (like text)

					        arcs.append("svg:path")
					                .attr("fill", function(d, i) { return color(i); } ) //set the color for each slice to be chosen from the color function defined above
					                .attr("d", arc);                                    //this creates the actual SVG path using the associated data (pie) with the arc drawing function

					        arcs.append("svg:text")                                     //add a label to each slice
					                .attr("transform", function(d) {                    //set the label's origin to the center of the arc
					                //we have to make sure to set these before calling arc.centroid
					                d.innerRadius = 0;
					                d.outerRadius = r;
					                return "translate(" + arc.centroid(d) + ")";        //this gives us a pair of coordinates like [50, 50]
					            })
					            .attr("text-anchor", "middle")                          //center the text on it's origin
					            .text(function(d, i) { return Count[i].label; });        //get the label from our original data array
	    	
		
					}
				</script>